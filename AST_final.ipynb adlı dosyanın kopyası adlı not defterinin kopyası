{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1YfeJvvTAxerV10vGgwqISykJ61fFeoxI","timestamp":1735903702075},{"file_id":"1LgRfM-FrbxB29rABw-nDRsocbnKBJd8B","timestamp":1717980012909}],"machine_shape":"hm","gpuType":"L4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"ce2755f463364827b12837ed9d6ef27c":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_5fe892cde8314d8ca555041f3813a54c","IPY_MODEL_59b1ace09d9d474680dffbee76068c88","IPY_MODEL_3f3d7cdf15ca4307aad91af9176244c4"],"layout":"IPY_MODEL_a9e45b19dc05488288183d5e6aed1a1c"}},"5fe892cde8314d8ca555041f3813a54c":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_3ac3ba0bc9c143cd8cd2ee8e23dc763a","placeholder":"​","style":"IPY_MODEL_ef4ae48714de41a5899a2a1234665af0","value":"config.json: 100%"}},"59b1ace09d9d474680dffbee76068c88":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_ccccddac16d5438b876e605dfdf50dab","max":26763,"min":0,"orientation":"horizontal","style":"IPY_MODEL_b095e71ce78a496aab174316fb798d81","value":26763}},"3f3d7cdf15ca4307aad91af9176244c4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_14375d5fe8e245dea4340d12d50757c7","placeholder":"​","style":"IPY_MODEL_9e4ddd6349aa4f8389cbecbd444796c3","value":" 26.8k/26.8k [00:00&lt;00:00, 1.93MB/s]"}},"a9e45b19dc05488288183d5e6aed1a1c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3ac3ba0bc9c143cd8cd2ee8e23dc763a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ef4ae48714de41a5899a2a1234665af0":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ccccddac16d5438b876e605dfdf50dab":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b095e71ce78a496aab174316fb798d81":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"14375d5fe8e245dea4340d12d50757c7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9e4ddd6349aa4f8389cbecbd444796c3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"5fb2f6ea2802452d90704e8ea50bd65d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_c4fe530f3d8d415aab20a1b6dd3d229a","IPY_MODEL_8ffa9a015e174aa79002200eb26baa70","IPY_MODEL_eae1ddaad1f44f588e35dd694d8f38e0"],"layout":"IPY_MODEL_3ba48053923d4d238f52bf43907c6d94"}},"c4fe530f3d8d415aab20a1b6dd3d229a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_3bf75d593d244eaa891efdcd3d860cb7","placeholder":"​","style":"IPY_MODEL_4f544e55f16845779043b1a471c57ee0","value":"model.safetensors: 100%"}},"8ffa9a015e174aa79002200eb26baa70":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_4d7ba69dbf6a47d7adb29b69e83b6b5e","max":346404948,"min":0,"orientation":"horizontal","style":"IPY_MODEL_1771185f23264163b47b8cb07c4cd89b","value":346404948}},"eae1ddaad1f44f588e35dd694d8f38e0":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_53b008ec701f4547b3ef5903fdd8bfc0","placeholder":"​","style":"IPY_MODEL_4373041b0c1d4d6db4e832f465840549","value":" 346M/346M [00:01&lt;00:00, 191MB/s]"}},"3ba48053923d4d238f52bf43907c6d94":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3bf75d593d244eaa891efdcd3d860cb7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4f544e55f16845779043b1a471c57ee0":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"4d7ba69dbf6a47d7adb29b69e83b6b5e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1771185f23264163b47b8cb07c4cd89b":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"53b008ec701f4547b3ef5903fdd8bfc0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4373041b0c1d4d6db4e832f465840549":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"wNk_Yg0gI2zw","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b9a94f21-c9d5-48f1-b4a3-24b36910ced1","executionInfo":{"status":"ok","timestamp":1735904180411,"user_tz":-180,"elapsed":2781,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pydub in /usr/local/lib/python3.10/dist-packages (0.25.1)\n"]}],"source":["!pip install pydub"]},{"cell_type":"code","source":["import os\n","from pydub import AudioSegment\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"ZxnIlMfnMgu4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"3IHHVgkeMklx","colab":{"base_uri":"https://localhost:8080/"},"outputId":"08c00e81-af91-48ed-e90d-28303169742a","executionInfo":{"status":"ok","timestamp":1735904195962,"user_tz":-180,"elapsed":5307,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["# # Verilerin ve sınıfların yolları\n","# data_dir = '/content/drive/MyDrive/SongsTest'\n","# output_dir = '/content/drive/MyDrive/SongTestSegments'\n","# classes = ['CountryTest', 'EDMTest', 'Hip Hop-RapTest', 'PopTest', 'R&BTest', 'RockTest']\n","\n","# # Çıktı dizinini oluşturma\n","# os.makedirs(output_dir, exist_ok=True)"],"metadata":{"id":"fk8OqnuUMlIo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_dir ='/content/drive/MyDrive/yazlab/divide'"],"metadata":{"id":"r4574QfQ8NPE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["classes = ['azerice', 'kazakca', 'kirgizca', 'ozbekce', 'turkce']"],"metadata":{"id":"HLgrwkga9GI2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Drive klasör erişim kontrolleri için - Bu kısım Drive'daki dosyaların önbelleğe alınıp kolay erişilebilmesi için gereklidir.\n","# for class_name in classes:\n","#     class_output_dir = os.path.join(output_dir, class_name)\n","#     try:\n","#         file_list = os.listdir(class_output_dir)\n","#         print(f\"Directory '{class_output_dir}' contains {len(file_list)} files.\")\n","#     except OSError as e:\n","#         print(f\"Error accessing directory {class_output_dir}: {e}\")"],"metadata":{"id":"Tu6Lvq2JoRqo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Her bir sınıf için ses dosyalarını işleme\n","# for label, class_name in enumerate(classes):\n","#     class_dir = os.path.join(data_dir, class_name)\n","#     class_output_dir = os.path.join(output_dir, class_name)\n","#     os.makedirs(class_output_dir, exist_ok=True)\n","\n","#     for filename in os.listdir(class_dir):\n","#         if filename.endswith('.mp3 adlı dosyanın kopyası'):\n","#             file_path = os.path.join(class_dir, filename)\n","#             audio = AudioSegment.from_file(file_path, format='mp3')\n","\n","#             # 10 saniyelik segmentlere ayırma\n","#             duration = 10 * 1000  # 10 saniye milisaniye cinsinden\n","#             for i in range(0, len(audio), duration):\n","#                 segment = audio[i:i + duration]\n","#                 if len(segment) < duration:\n","#                     segment = segment + AudioSegment.silent(duration - len(segment))  # 10 saniyeye tamamla\n","#                 segment_filename = f'{os.path.splitext(filename)[0]}_{i // duration}.mp3'\n","#                 segment_path = os.path.join(class_output_dir, segment_filename)\n","#                 segment.export(segment_path, format='mp3')"],"metadata":{"id":"Eb_rKdH3425x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.model_selection import train_test_split\n","from pydub import AudioSegment\n","import io\n","import librosa"],"metadata":{"id":"IvJ69VnCzeDj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","from tqdm import tqdm\n","\n","# Segmentleri ve etiketleri yüklemek için listeler\n","segments = []\n","labels = []\n","\n","for label, class_name in enumerate(classes):\n","    class_data_dir = os.path.join(data_dir, class_name)\n","\n","    # İlerleme göstergesi için tqdm kullanımı\n","    files = [f for f in os.listdir(class_data_dir) if f.endswith('.wav')]\n","    for filename in tqdm(files, desc=f\"Loading {class_name} segments\"):\n","        file_path = os.path.join(class_data_dir, filename)\n","\n","        try:\n","            # `librosa` ile ses dosyasını yükleyin\n","            audio, sr = librosa.load(file_path, sr=16000)\n","            segment_array = np.array(audio)\n","\n","            # Check if the segment array has the same shape as the others\n","            if segments and segment_array.shape != segments[0].shape:\n","                # Normalize and fix the length of the segment array\n","                segment_array = librosa.util.normalize(segment_array)\n","                segment_array = librosa.util.fix_length(segment_array, size=segments[0].shape[0])\n","\n","            segments.append(segment_array)\n","            labels.append(label)\n","\n","        except Exception as e:\n","            print(f\"Error processing file {file_path}: {e}\")\n","\n","# Sonuçları kontrol etme\n","print(f\"Loaded {len(segments)} segments with corresponding labels.\")"],"metadata":{"id":"wXlhlVAizgfW","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6655aaca-6fe0-475b-d776-1c7c8e76cf60","executionInfo":{"status":"ok","timestamp":1735906437653,"user_tz":-180,"elapsed":1705222,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"execution_count":16,"outputs":[{"output_type":"stream","name":"stderr","text":["Loading azerice segments: 100%|██████████| 3949/3949 [08:41<00:00,  7.58it/s]\n","Loading kazakca segments: 100%|██████████| 3981/3981 [06:12<00:00, 10.68it/s]\n","Loading kirgizca segments: 100%|██████████| 3949/3949 [07:58<00:00,  8.26it/s]\n","Loading ozbekce segments: 100%|██████████| 3949/3949 [06:33<00:00, 10.03it/s]\n","Loading turkce segments: 100%|██████████| 3850/3850 [06:41<00:00,  9.59it/s]"]},{"output_type":"stream","name":"stdout","text":["Loaded 19678 segments with corresponding labels.\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["# Segmentleri ve etiketleri numpy dizilerine dönüştürme\n","segments_np = np.array(segments)\n","labels_np = np.array(labels)"],"metadata":{"id":"oX6Rgm9WzkVK","executionInfo":{"status":"ok","timestamp":1735908000420,"user_tz":-180,"elapsed":8903,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["# Eğitim ve test setlerine ayırma\n","X_train, X_test, y_train, y_test = train_test_split(segments_np, labels_np, test_size=0.2, random_state=42)"],"metadata":{"id":"6etJN_IIzmtJ","executionInfo":{"status":"ok","timestamp":1735908008670,"user_tz":-180,"elapsed":8251,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["print(f'Toplam dosya sayısı: {len(segments_np)}')\n","print(f'Eğitim seti dosya sayısı: {len(X_train)}')\n","print(f'Test seti dosya sayısı: {len(X_test)}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oI0N_LAxzopx","outputId":"e34911d1-d1da-4fea-e39f-95bb50b67af8","executionInfo":{"status":"ok","timestamp":1735908008670,"user_tz":-180,"elapsed":3,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Toplam dosya sayısı: 19678\n","Eğitim seti dosya sayısı: 15742\n","Test seti dosya sayısı: 3936\n"]}]},{"cell_type":"code","source":["from transformers import ASTFeatureExtractor, ASTForAudioClassification\n","import torch\n","from torch.utils.data import DataLoader, TensorDataset"],"metadata":{"id":"YU0CEMdbNNV8","executionInfo":{"status":"ok","timestamp":1735908022067,"user_tz":-180,"elapsed":13399,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["# ASTFeatureExtractor'ı başlatma\n","feature_extractor = ASTFeatureExtractor(sampling_rate=16000)"],"metadata":{"id":"hlRc-Jb9QE5c","executionInfo":{"status":"ok","timestamp":1735908022068,"user_tz":-180,"elapsed":3,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["# Ses verilerini özelliklere dönüştürme\n","X_train_features = feature_extractor(X_train, sampling_rate=16000, return_tensors=\"pt\")\n","X_test_features = feature_extractor(X_test, sampling_rate=16000, return_tensors=\"pt\")"],"metadata":{"id":"6hjxXjevQQiu","executionInfo":{"status":"ok","timestamp":1735908089440,"user_tz":-180,"elapsed":67374,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["# Numpy verilerini PyTorch tensörlerine dönüştürme ve DataLoader oluşturma\n","train_dataset = TensorDataset(X_train_features['input_values'], torch.tensor(y_train))\n","test_dataset = TensorDataset(X_test_features['input_values'], torch.tensor(y_test))\n","train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)\n","test_loader = DataLoader(test_dataset, batch_size=16)"],"metadata":{"id":"icw1j8saQRGZ","executionInfo":{"status":"ok","timestamp":1735908089441,"user_tz":-180,"elapsed":4,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["# ASTForAudioClassification modelini başlatma\n","model = ASTForAudioClassification.from_pretrained(\"MIT/ast-finetuned-audioset-10-10-0.4593\", num_labels=len(classes), ignore_mismatched_sizes=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":275,"referenced_widgets":["ce2755f463364827b12837ed9d6ef27c","5fe892cde8314d8ca555041f3813a54c","59b1ace09d9d474680dffbee76068c88","3f3d7cdf15ca4307aad91af9176244c4","a9e45b19dc05488288183d5e6aed1a1c","3ac3ba0bc9c143cd8cd2ee8e23dc763a","ef4ae48714de41a5899a2a1234665af0","ccccddac16d5438b876e605dfdf50dab","b095e71ce78a496aab174316fb798d81","14375d5fe8e245dea4340d12d50757c7","9e4ddd6349aa4f8389cbecbd444796c3","5fb2f6ea2802452d90704e8ea50bd65d","c4fe530f3d8d415aab20a1b6dd3d229a","8ffa9a015e174aa79002200eb26baa70","eae1ddaad1f44f588e35dd694d8f38e0","3ba48053923d4d238f52bf43907c6d94","3bf75d593d244eaa891efdcd3d860cb7","4f544e55f16845779043b1a471c57ee0","4d7ba69dbf6a47d7adb29b69e83b6b5e","1771185f23264163b47b8cb07c4cd89b","53b008ec701f4547b3ef5903fdd8bfc0","4373041b0c1d4d6db4e832f465840549"]},"id":"q3vkZtqfQePq","outputId":"596f659d-c60c-47b9-b854-b17fcbed5f9e","executionInfo":{"status":"ok","timestamp":1735908095499,"user_tz":-180,"elapsed":6061,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"execution_count":24,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["config.json:   0%|          | 0.00/26.8k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ce2755f463364827b12837ed9d6ef27c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["model.safetensors:   0%|          | 0.00/346M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5fb2f6ea2802452d90704e8ea50bd65d"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["Some weights of ASTForAudioClassification were not initialized from the model checkpoint at MIT/ast-finetuned-audioset-10-10-0.4593 and are newly initialized because the shapes did not match:\n","- classifier.dense.bias: found shape torch.Size([527]) in the checkpoint and torch.Size([5]) in the model instantiated\n","- classifier.dense.weight: found shape torch.Size([527, 768]) in the checkpoint and torch.Size([5, 768]) in the model instantiated\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"]}]},{"cell_type":"code","source":["# Optimizasyon fonksiyonunu tanımlama\n","optimizer = torch.optim.Adam(model.parameters(), lr=5e-5)\n","\n","# Kayıp fonksiyonu tanımlama\n","loss_fn = torch.nn.CrossEntropyLoss()"],"metadata":{"id":"24Z9jhDaYqhn","executionInfo":{"status":"ok","timestamp":1735908095499,"user_tz":-180,"elapsed":3,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","from sklearn.metrics import accuracy_score, precision_recall_fscore_support"],"metadata":{"id":"ycHdlI-0VhUU","executionInfo":{"status":"ok","timestamp":1735908095499,"user_tz":-180,"elapsed":2,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","model.to(device)"],"metadata":{"id":"yB53AMZLVliM","colab":{"base_uri":"https://localhost:8080/"},"outputId":"5ad9af40-0f2c-4836-b9d0-783cb256ca1c","executionInfo":{"status":"ok","timestamp":1735908096948,"user_tz":-180,"elapsed":1023,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ASTForAudioClassification(\n","  (audio_spectrogram_transformer): ASTModel(\n","    (embeddings): ASTEmbeddings(\n","      (patch_embeddings): ASTPatchEmbeddings(\n","        (projection): Conv2d(1, 768, kernel_size=(16, 16), stride=(10, 10))\n","      )\n","      (dropout): Dropout(p=0.0, inplace=False)\n","    )\n","    (encoder): ASTEncoder(\n","      (layer): ModuleList(\n","        (0-11): 12 x ASTLayer(\n","          (attention): ASTSdpaAttention(\n","            (attention): ASTSdpaSelfAttention(\n","              (query): Linear(in_features=768, out_features=768, bias=True)\n","              (key): Linear(in_features=768, out_features=768, bias=True)\n","              (value): Linear(in_features=768, out_features=768, bias=True)\n","              (dropout): Dropout(p=0.0, inplace=False)\n","            )\n","            (output): ASTSelfOutput(\n","              (dense): Linear(in_features=768, out_features=768, bias=True)\n","              (dropout): Dropout(p=0.0, inplace=False)\n","            )\n","          )\n","          (intermediate): ASTIntermediate(\n","            (dense): Linear(in_features=768, out_features=3072, bias=True)\n","            (intermediate_act_fn): GELUActivation()\n","          )\n","          (output): ASTOutput(\n","            (dense): Linear(in_features=3072, out_features=768, bias=True)\n","            (dropout): Dropout(p=0.0, inplace=False)\n","          )\n","          (layernorm_before): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","          (layernorm_after): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","        )\n","      )\n","    )\n","    (layernorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","  )\n","  (classifier): ASTMLPHead(\n","    (layernorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","    (dense): Linear(in_features=768, out_features=5, bias=True)\n","  )\n",")"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["def train_epoch(model, train_loader, optimizer, device):\n","    model.train()\n","    total_loss = 0\n","    correct_predictions = 0\n","\n","    for batch in train_loader:\n","        input_values, labels = batch\n","        input_values = input_values.to(device)\n","        labels = labels.to(device)\n","\n","        outputs = model(input_values.to(device))\n","        logits = outputs.logits.to(device)\n","        loss = loss_fn(logits, labels)\n","\n","        total_loss += loss.item()\n","        _, preds = torch.max(logits, dim=1)\n","        correct_predictions += torch.sum(preds == labels)\n","\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","\n","    return total_loss / len(train_loader), correct_predictions.double() / len(train_loader.dataset)"],"metadata":{"id":"zASLHRfkQ-uk","executionInfo":{"status":"ok","timestamp":1735908096949,"user_tz":-180,"elapsed":2,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["all_preds = []\n","all_labels = []\n","\n","def eval_model(model, test_loader, device):\n","    model.eval()\n","    total_loss = 0\n","    correct_predictions = 0\n","\n","    with torch.no_grad():\n","        for batch in test_loader:\n","            input_values, labels = batch\n","            input_values = input_values.to(device)\n","            labels = labels.to(device)\n","\n","            outputs = model(input_values.to(device))\n","            logits = outputs.logits.to(device)\n","            loss = loss_fn(logits, labels)\n","\n","            total_loss += loss.item()\n","            _, preds = torch.max(logits, dim=1)\n","            correct_predictions += torch.sum(preds == labels)\n","\n","            all_preds.extend(preds.cpu().numpy())\n","            all_labels.extend(labels.cpu().numpy())\n","\n","    return total_loss / len(test_loader), correct_predictions.double() / len(test_loader.dataset), all_preds, all_labels"],"metadata":{"id":"8FA1nCgvWjNg","executionInfo":{"status":"ok","timestamp":1735908096949,"user_tz":-180,"elapsed":2,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["num_epochs = 5\n","train_losses = []\n","test_losses = []\n","train_accuracies = []\n","test_accuracies = []"],"metadata":{"id":"der8eRrYWc_8","executionInfo":{"status":"ok","timestamp":1735908096949,"user_tz":-180,"elapsed":2,"user":{"displayName":"Abdullah İşler","userId":"05198455713190770364"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["for epoch in range(num_epochs):\n","    print(f'Epoch {epoch + 1}/{num_epochs}')\n","\n","    train_loss, train_acc = train_epoch(model, train_loader, optimizer, device)\n","    test_loss, test_acc, test_preds, test_labels = eval_model(model, test_loader, device)\n","\n","    train_losses.append(train_loss)\n","    test_losses.append(test_loss)\n","    train_accuracies.append(train_acc)\n","    test_accuracies.append(test_acc)\n","\n","    print(f'Train Loss: {train_loss}, Train Accuracy: {train_acc}')\n","    print(f'Test Loss: {test_loss}, Test Accuracy: {test_acc}')"],"metadata":{"id":"rpLqC5_qM1DT","colab":{"base_uri":"https://localhost:8080/"},"outputId":"67765ae8-5fd9-4b0f-ec90-952ceecd40e8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","Train Loss: 0.17097374433306106, Train Accuracy: 0.9414940922373268\n","Test Loss: 0.04130603222822869, Test Accuracy: 0.9850101626016261\n","Epoch 2/5\n"]}]},{"cell_type":"code","source":["# Accuracy ve loss grafikleri\n","plt.figure()\n","plt.subplot(1, 1, 1)\n","plt.plot(range(num_epochs), train_losses, label='Train Loss')\n","plt.plot(range(num_epochs), test_losses, label='Test Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.yticks([i/10 for i in range(1, 10)])\n","plt.legend()"],"metadata":{"id":"IM65LvFkM8Xa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# plt.subplot(1, 2, 2)\n","# plt.plot(range(num_epochs), train_accuracies, label='Train Accuracy')\n","# plt.plot(range(num_epochs), test_accuracies, label='Test Accuracy')\n","# plt.xlabel('Epoch')\n","# plt.ylabel('Accuracy')\n","# plt.legend()\n","\n","# Train accuracy verilerini CPU belleğine kopyala\n","train_accuracies_cpu = [acc.cpu().numpy() for acc in train_accuracies]\n","test_accuracies_cpu = [acc.cpu().numpy() for acc in test_accuracies]\n","\n","# Grafik çizdirme işlemi\n","plt.figure()\n","plt.subplot(1, 1, 1)\n","plt.plot(range(num_epochs), train_accuracies_cpu, label='Train Accuracy')\n","plt.plot(range(num_epochs), test_accuracies_cpu, label='Test Accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.yticks([i/10 for i in range(1, 10)])\n","plt.legend()"],"metadata":{"id":"KvG8LIMUM-Zo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.show()"],"metadata":{"id":"hQZKmYqYNAu-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Precision, Recall, F1-Score hesaplama\n","precision, recall, f1, _ = precision_recall_fscore_support(test_labels, test_preds, average='macro')\n","print(f'Precision: {precision}')\n","print(f'Recall: {recall}')\n","print(f'F1-Score: {f1}')"],"metadata":{"id":"G9L7ytKoR2-2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import auc, roc_curve, roc_auc_score, confusion_matrix\n","import seaborn as sns\n","from sklearn.preprocessing import label_binarize\n","\n","labels = np.array(all_labels)\n","preds = np.array(all_preds)\n","\n","# Sınıfları ikili hale getirin\n","n_classes = len(np.unique(labels))\n","labels = label_binarize(labels, classes=[0, 1, 2, 3, 4])\n","preds = label_binarize(preds, classes=[0, 1, 2, 3, 4])\n","\n","# Her sınıf için ROC ve AUC hesapla\n","fpr = dict()\n","tpr = dict()\n","roc_auc = dict()\n","for i in range(n_classes):\n","    fpr[i], tpr[i], _ = roc_curve(labels[:, i], preds[:, i])\n","    roc_auc[i] = auc(fpr[i], tpr[i])\n","\n","# ROC eğrisini çizdir\n","plt.figure()\n","colors = ['blue', 'red', 'green', 'purple', 'orange', 'brown']\n","for i, color in zip(range(n_classes), colors):\n","    plt.plot(fpr[i], tpr[i], color=color, lw=2, label='ROC curve of class {0} (AUC = {1:0.2f})'.format(i, roc_auc[i]))\n","plt.plot([0, 1], [0, 1], color='gray', linestyle='--')\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.05])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver Operating Characteristic (ROC) Curve for Multiclass')\n","plt.legend(loc=\"lower right\")\n","plt.show()"],"metadata":{"id":"M16gVAsD_PqW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Confusion matrix oluştur\n","cm = confusion_matrix(all_labels, all_preds)\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(cm, annot=True, fmt='d', cmap='Greens', xticklabels=classes, yticklabels=classes)\n","plt.xlabel('Predicted labels')\n","plt.ylabel('True labels')\n","plt.title('Confusion Matrix')\n","plt.show()"],"metadata":{"id":"j1kQmE5g_c14"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class_names"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"CrR1-CkzcKlt","executionInfo":{"status":"ok","timestamp":1717977620922,"user_tz":-180,"elapsed":3,"user":{"displayName":"Alparslan Bakır","userId":"06755856235487481759"}},"outputId":"6904d64c-fc61-42ef-8414-315d0665545d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['darija', 'iraqi', 'egyptian', 'gulf', 'levantine']"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","import pandas as pd\n","\n","# Sınıfları ikili hale getirin\n","class_names = ['darija', 'iraqi', 'egyptian', 'gulf', 'levantine']\n","\n","# Classification report oluştur\n","report = classification_report(labels, preds, target_names=class_names, output_dict=True)\n","\n","# DataFrame'e dönüştür ve precision ve recall sütunlarını seç\n","df_report = pd.DataFrame(report).transpose()\n","df_precision_recall = df_report[['precision', 'recall']]\n","\n","# Precision ve recall değerlerini tablo olarak yazdır\n","print(df_precision_recall)"],"metadata":{"id":"SP1Vmka98SC7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","\n","# Eğitim sonrası modeli kaydetme\n","model_save_path = '/content/drive/MyDrive/saved_models/AST_finetuned.pth'  # Modelin kaydedileceği dosya yolu\n","torch.save(model.state_dict(), model_save_path)\n","print(f\"Model saved to {model_save_path}\")"],"metadata":{"id":"bfFWCxiMyeLQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","from transformers import HubertForSequenceClassification, Wav2Vec2FeatureExtractor\n","import librosa\n","import os\n","import numpy as np\n","\n","# Modeli yükleme\n","model_load_path = '/content/drive/MyDrive/saved_models/hubert_pretrained.pth'\n","model = HubertForSequenceClassification.from_pretrained(\"superb/hubert-large-superb-ks\", num_labels=5, ignore_mismatched_sizes=True)\n","model.load_state_dict(torch.load(model_load_path))\n","model.eval()\n","\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","\n","model.to(device)\n","\n","# Feature extractor'ı başlatma\n","feature_extractor = Wav2Vec2FeatureExtractor(sampling_rate=16000)\n","\n","# Prediction için ses dosyasını yükleme ve özelliklere dönüştürme\n","def predict(file_path, model, feature_extractor):\n","    audio, sr = librosa.load(file_path, sr=16000)\n","    inputs = feature_extractor(audio, sampling_rate=16000, return_tensors=\"pt\")\n","    input_values = inputs['input_values'].to(device)\n","\n","    with torch.no_grad():\n","        outputs = model(input_values)\n","        logits = outputs.logits\n","        predicted_class_id = torch.argmax(logits, dim=1).item()\n","\n","    return predicted_class_id\n","\n","# Prediction için klasördeki tüm dosyaları işleme\n","def predict_folder(folder_path, model, feature_extractor):\n","    predictions = {}\n","\n","    for filename in os.listdir(folder_path):\n","        if filename.endswith('.mp3'):\n","            file_path = os.path.join(folder_path, filename)\n","            predicted_class_id = predict(file_path, model, feature_extractor)\n","            predicted_class_name = classes[predicted_class_id]\n","            predictions[filename] = predicted_class_name\n","\n","    return predictions\n","\n","# Test etmek için örnek bir klasör yolu\n","test_folder_path = '/content/drive/MyDrive/arabic_test/'\n","\n","# Prediction yapma\n","predictions = predict_folder(test_folder_path, model, feature_extractor)\n","\n","# Sonuçları yazdırma\n","for filename, predicted_class_name in predictions.items():\n","    print(f'File: {filename}, Predicted class: {predicted_class_name}')"],"metadata":{"id":"QrjyG0melIHH"},"execution_count":null,"outputs":[]}]}